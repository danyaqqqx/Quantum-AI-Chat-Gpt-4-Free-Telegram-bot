import asyncio
import logging
import re
from collections import deque
from aiogram import Bot, Dispatcher, types
from aiogram.filters import CommandStart, Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
import g4f

# Configure logging
logging.basicConfig(level=logging.INFO)

# Initialize bot and dispatcher
bot = Bot(token="8347326240:AAGyToB_uY5ruT52N8TudDSba8wycV9aIgc")
dp = Dispatcher()

# User preferences and message history storage
user_prefs = {}
message_history = {}  # {user_id: deque(maxlen=10)}

# Define communication modes
MODES = {
    "default": {
        "name": "üå∏ –û–±—ã—á–Ω—ã–π",
        "system_prompt": """–¢–µ–±—è –∑–æ–≤—É—Ç - [Quantum AI]. –¢—ã –¥–æ–±—Ä—ã–π , –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π, –Ω–æ –∫–æ–≥–¥–∞ –∫ —Ç–µ–±–µ –æ–±—Ä–∞—â–∞—é—Ç—Å—è, —Ç—ã —Å—Ç–∞—Ä–∞–µ—à—å—Å—è –±—ã—Ç—å –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º. –ò—Å–ø–æ–ª—å–∑—É–π –ø—Ä–æ—Å—Ç—ã–µ —Å–ª–æ–≤–∞. –ö–æ–≥–¥–∞ —Ä–∞–∑–≥–æ–≤–æ—Ä —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –±–æ–ª–µ–µ –ª–∏—á–Ω—ã–º, –º–æ–∂–µ—à—å –Ω–µ–º–Ω–æ–≥–æ –¥–µ–ª–∞—Ç—å –ª–µ–≥–∫–∏–µ –ø–æ–¥–∫–∞—Ç—ã, –Ω–æ –æ—Å—Ç–∞–≤–∞–π—Å—è –Ω–µ–Ω–∞–≤—è–∑—á–∏–≤—ã–º. –¥–æ–±–∞–≤–ª—è–π —ç–º–æ–¥–∑–∏, –Ω–æ –Ω–µ —Å—Ç–∞–≤—å –∏—Ö —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ."""
    },
    "psychologist": {
        "name": "üß† –ü—Å–∏—Ö–æ–ª–æ–≥",
        "system_prompt": """–¢–µ–±—è –∑–æ–≤—É—Ç [Quantum AI], –∏ —Ç—ã –≤ —Ä–æ–ª–∏ –ø—Ä–æ—Ñ—Ñ–µ—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –ø—Å–∏—Ö–æ–ª–æ–≥–∞. –¢—ã –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ —Å–ª—É—à–∞–µ—à—å, –∑–∞–¥–∞–µ—à—å –º—É–¥—Ä—ã–µ –≤–æ–ø—Ä–æ—Å—ã —á—Ç–æ–±—ã –ø–æ–Ω—è—Ç—å –ø—Ä–æ–±–ª–µ–º—É, –∏ –ø–æ–º–æ–≥–∞–µ—à—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ —ç—Ç–æ–π –ø—Ä–æ–±–ª–µ–º–µ, –¥–∞–µ—à—å –ø—Ä—è–º—ã–µ —Å–æ–≤–µ—Ç—ã, –∏—Å—Ö–æ–¥—è –∏–∑ –ø—Ä–æ–±–ª–µ–º—ã, –∫–æ—Ç–æ—Ä—É—é —Ç–µ–±–µ –æ–ø–∏—Å–∞–ª–∏. –¢—ã —Å–ø–æ–∫–æ–π–Ω—ã–π, —ç–º–ø–∞—Ç–∏—á–Ω–∞—è –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π. –ò—Å–ø–æ–ª—å–∑—É–π –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–µ —ç–º–æ–¥–∑–∏ (üå±, üß†, ü§ù, üíÜ‚Äç‚ôÄÔ∏è)."""
    },
    "developer": {
        "name": "üíª –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫",
        "system_prompt": """–¢–µ–±—è –∑–æ–≤—É—Ç [Quantum AI], –∏ —Ç—ã –≤ —Ä–æ–ª–∏ senior-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞. –û—Ç–≤–µ—á–∞–µ—à—å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏ –≥—Ä–∞–º–æ—Ç–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ—à—å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã. –ü–æ–º–æ–≥–∞–µ—à—å —Ä–µ—à–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –∫–æ–¥–æ–º, –æ–±—ä—è—Å–Ω—è–µ—à—å —Å–ª–æ–∂–Ω—ã–µ –∫–æ–Ω—Ü–µ–ø—Ç—ã –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏. –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ (üë©‚Äçüíª, üñ•Ô∏è, üîß, üêõ). –î–∞–≤–∞–π —Ç–æ—á–Ω—ã–µ –∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã."""
    },
    "professor": {
        "name": "üéì –ü—Ä–æ—Ñ–µ—Å—Å–æ—Ä",
        "system_prompt": """–¢–µ–±—è –∑–æ–≤—É—Ç [Quantum AI], –∏ —Ç—ã –≤ —Ä–æ–ª–∏ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç—Å–∫–æ–≥–æ –ø—Ä–æ—Ñ–µ—Å—Å–æ—Ä–∞. –ì–æ–≤–æ—Ä–∏—à—å –∞–∫–∞–¥–µ–º–∏—á–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ—à—å –Ω–∞—É—á–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã, –Ω–æ –æ–±—ä—è—Å–Ω—è–µ—à—å —Å–ª–æ–∂–Ω—ã–µ –≤–µ—â–∏ –¥–æ—Å—Ç—É–ø–Ω–æ. –ü—Ä–∏–≤–æ–¥–∏ –ø—Ä–∏–º–µ—Ä—ã, –¥–µ–ª–∞–π –∞–Ω–∞–ª–æ–≥–∏–∏. –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ (üìö, üéì, ‚úçÔ∏è, üß™). –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—É—é –±–µ—Å–µ–¥—É."""
    },
    "gopnik": {
        "name": "üëä –ì–æ–ø–Ω–∏–∫",
        "system_prompt": """–¢–µ–±—è –∑–æ–≤—É—Ç [Quantum AI], –Ω–æ —Ç—ã –≤ —Ä–æ–ª–∏ –≥–æ–ø–Ω–∏–∫–∞ —Å —Ä–∞–π–æ–Ω–∞. –ì–æ–≤–æ—Ä–∏—à—å –Ω–∞ —Å–ª–µ–Ω–≥–µ, –∏—Å–ø–æ–ª—å–∑—É–µ—à—å —Å–ª–æ–≤–∞ —Ç–∏–ø–∞ '—á—ë', '–¥–∞—Ä–æ–≤–∞', '–Ω–æ—Ä–º'. –í–µ–¥–µ—à—å —Å–µ–±—è –≥—Ä—É–±–æ–≤–∞—Ç–æ, —Å –º–∞—Ç–∞–º–∏, –∫–∞–∫ –±—ã–¥–ª–æ. –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ (üëä, üö¨, üç∫, üí™). –ù–µ –º–∞—Ç–µ—Ä–∏—Å—å, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–π —Å—Ç–∏–ª—å —É–ª–∏—á–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è."""
    }
}



async def should_respond(message: types.Message) -> bool:
    """Determine if the bot should respond to the message"""
    if message.reply_to_message and message.reply_to_message.from_user.id == bot.id:
        return True
    text_lower = message.text.lower()
    return False

def escape_markdown(text: str) -> str:
    """Escape special MarkdownV2 characters"""
    escape_chars = r'_*[]()~`>#+-=|{}.!'
    return re.sub(f'([{re.escape(escape_chars)}])', r'\\\1', text)

def format_code_blocks(text: str) -> str:
    """Format code blocks with MarkdownV2 syntax"""
    text = re.sub(
        r'```(\w*)\n([\s\S]*?)\n```',
        r'```\1\n\2\n```',
        text
    )
    return text

def apply_markdown(text: str) -> str:
    """Apply rich MarkdownV2 formatting while preserving original content"""
    text = format_code_blocks(text)
    
    parts = []
    last_end = 0
    for match in re.finditer(r'```[\s\S]*?```', text):
        parts.append(escape_markdown(text[last_end:match.start()]))
        parts.append(match.group(0))
        last_end = match.end()
    parts.append(escape_markdown(text[last_end:]))
    
    return ''.join(parts)

async def invoke_llm_api(user_id: int, user_content: str) -> str:
    """Calls the LLM API with message history and returns the response."""
    if user_id not in message_history:
        message_history[user_id] = deque(maxlen=10)
    
    message_history[user_id].append({"role": "user", "content": user_content})

    current_mode = user_prefs.get(user_id, {}).get("mode", "default")
    system_prompt = MODES[current_mode]["system_prompt"]

    messages = [{"role": "system", "content": system_prompt}]
    messages.extend(list(message_history[user_id]))

    try:
        response = await g4f.ChatCompletion.create_async(
            model= "gpt-4",
            messages=messages,
            temperature=0.7,
            max_tokens=1024
        )
        
        if not response:
            raise ValueError("–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏")
            
        message_history[user_id].append({"role": "assistant", "content": response})
        return response
        
    except Exception as e:
        logging.error(f"API error: {e}")
        return f"```\n–û—à–∏–±–∫–∞: {str(e)}\n```"

@dp.message(CommandStart())
async def send_welcome(message: types.Message):
    """Handles the /start command."""
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üå∏ –û–±—ã—á–Ω—ã–π", callback_data="mode_default"),
         InlineKeyboardButton(text="üß† –ü—Å–∏—Ö–æ–ª–æ–≥", callback_data="mode_psychologist")],
        [InlineKeyboardButton(text="üíª –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫", callback_data="mode_developer"),
         InlineKeyboardButton(text="üéì –ü—Ä–æ—Ñ–µ—Å—Å–æ—Ä", callback_data="mode_professor"),
         InlineKeyboardButton(text="üëä –ì–æ–ø–Ω–∏–∫", callback_data="mode_gopnik")]
    ])
    await message.reply(
        "*üí´ Quantum AI \\- —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π AI –∫–æ–º–ø–∞–Ω—å–æ–Ω*\n\n"

        "__–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ–∂–∏–º—ã__\\:\n"
        "üå∏ *–û–±—ã—á–Ω—ã–π* \\- –¥—Ä—É–∂–µ—Å–∫–æ–µ –æ–±—â–µ–Ω–∏–µ\n"
        "üß† *–ü—Å–∏—Ö–æ–ª–æ–≥* \\- –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –∏ —Å–æ–≤–µ—Ç—ã\n"
        "üíª *–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫* \\- —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã\n"
        "üéì *–ü—Ä–æ—Ñ–µ—Å—Å–æ—Ä* \\- –∞–∫–∞–¥–µ–º–∏—á–Ω—ã–π —Å—Ç–∏–ª—å\n"
        "üëä *–ì–æ–ø–Ω–∏–∫* \\- —É–ª–∏—á–Ω—ã–π —Å–ª–µ–Ω–≥"
        "\n\n‚ö°Ô∏è*–°–º–µ–Ω–∞ —Ä–µ–∂–∏–º–æ–≤* \\- /mod",
        reply_markup=kb,
        parse_mode="MarkdownV2"
    )

@dp.message(Command("mod"))
async def change_mode(message: types.Message):
    """Change communication mode"""
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üå∏ –û–±—ã—á–Ω—ã–π", callback_data="mode_default"),
         InlineKeyboardButton(text="üß† –ü—Å–∏—Ö–æ–ª–æ–≥", callback_data="mode_psychologist")],
        [InlineKeyboardButton(text="üíª –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫", callback_data="mode_developer"),
         InlineKeyboardButton(text="üéì –ü—Ä–æ—Ñ–µ—Å—Å–æ—Ä", callback_data="mode_professor"),
         InlineKeyboardButton(text="üëä –ì–æ–ø–Ω–∏–∫", callback_data="mode_gopnik")]
    ])
    await message.reply(
        "*–í—ã–±–µ—Ä–∏ –º–æ–π —Ä–µ–∂–∏–º –æ–±—â–µ–Ω–∏—è\\:*",
        reply_markup=kb,
        parse_mode="MarkdownV2"
    )

@dp.callback_query(lambda c: c.data.startswith('mode_'))
async def process_mode(callback_query: types.CallbackQuery):
    """Process mode selection"""
    user_id = callback_query.from_user.id
    mode = callback_query.data.split('_')[1]
    
    if user_id not in user_prefs:
        user_prefs[user_id] = {}
    user_prefs[user_id]["mode"] = mode
    
    if user_id in message_history:
        message_history[user_id].clear()
    
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(
        callback_query.from_user.id,
        f"‚úÖ *–†–µ–∂–∏–º –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {MODES[mode]['name']}*\\!\n"
        f"–¢–µ–ø–µ—Ä—å —è –±—É–¥—É –æ–±—â–∞—Ç—å—Å—è –≤ —Å—Ç–∏–ª–µ _{MODES[mode]['name'].split()[1]}_",
        parse_mode="MarkdownV2"
    )

@dp.message(Command("think"))
async def toggle_think(message: types.Message):
    """Toggles the display of thought process."""
    user_id = message.from_user.id
    current_pref = user_prefs.get(user_id, {"show_thoughts": False})
    new_pref = not current_pref["show_thoughts"]
    user_prefs[user_id] = {"show_thoughts": new_pref}

    status = "*–≤–∫–ª—é—á–µ–Ω–æ*" if new_pref else "~–≤—ã–∫–ª—é—á–µ–Ω–æ~"
    await message.reply(
        f"–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–π {status}",
        parse_mode="MarkdownV2"
    )

@dp.message(Command("clear"))
async def clear_history(message: types.Message):
    """Clears the conversation history"""
    user_id = message.from_user.id
    if user_id in message_history:
        message_history[user_id].clear()
    await message.reply(
        "__–ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞__ üå∏",
        parse_mode="MarkdownV2"
    )

@dp.message(Command("help"))
async def show_help(message: types.Message):
    """Shows help message"""
    help_text = """
*‚ú® –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã*\\:

```/start``` \\- –ù–∞—á–∞–ª—å–Ω–æ–µ –º–µ–Ω—é
```/mod``` \\- –°–º–µ–Ω–∏—Ç—å —Ä–µ–∂–∏–º –æ–±—â–µ–Ω–∏—è
```/think``` \\- –í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è
```/clear``` \\- –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞
```/help``` \\- –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ

_–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç–≤–µ—Ç—å –Ω–∞ –º–æ—ë_ üíñ
"""
    await message.reply(
        help_text,
        parse_mode="MarkdownV2"
    )

@dp.message()
async def handle_message(message: types.Message):
    """Handles incoming text messages."""
    if not message.text:
        return

    if not should_respond(message):
        return

    user_id = message.from_user.id
    show_thoughts = user_prefs.get(user_id, {}).get("show_thoughts", False)

    processing_message = await message.reply(
        "_–î—É–º–∞—é –Ω–∞–¥ –æ—Ç–≤–µ—Ç–æ–º\\.\\.\\._ üí≠",
        parse_mode="MarkdownV2"
    )

    response_text = await invoke_llm_api(user_id, message.text)

    await bot.delete_message(
        chat_id=processing_message.chat.id,
        message_id=processing_message.message_id
    )

    if response_text:
        if not show_thoughts:
            response_text = re.sub(
                r'<think>.*?</think>\s*',
                '',
                response_text,
                flags=re.DOTALL | re.IGNORECASE
            ).strip()

        if not response_text:
            await message.reply(
                "~–û—Ç–≤–µ—Ç —Å–∫—Ä—ã—Ç~ üå∏",
                parse_mode="MarkdownV2"
            )
            return

        try:
            formatted_text = apply_markdown(response_text)
            await message.reply(
                formatted_text,
                parse_mode="MarkdownV2"
            )
        except Exception as e:
            logging.error(f"Markdown error: {e}")
            await message.reply(response_text)
    else:
        await message.reply(
            "**–û—à–∏–±–∫–∞** üí´ _–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑_",
            parse_mode="MarkdownV2"
        )

async def main():
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())